# name: Streamlit CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main  # Trigger pipeline on push to main branch
#   pull_request:
#     branches:
#       - main  # Trigger pipeline on PR to main

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the code from GitHub
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     # Step 2: Set up Python
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'  # Use Python 3.10 or later

#     # Step 3: Install dependencies
#     - name: Install Dependencies
#       run: |
#         python -m pip install --upgrade pip
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#     # Step 4: Run Tests (Optional - can be added later)
#     - name: Run Tests
#       run: |
#         echo "No tests configured yet. Skipping."

#     # Step 5: Deploy to Render (Manual Trigger or Push to Main)
#     - name: Deploy to Render
#       if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#       env:
#         RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
#         RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
#       run: |
#         curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?api_key=${{ secrets.RENDER_API_KEY }}"


# name: Crop Recommendation CI Pipeline

# on:
#   push:
#     branches:
#       - main  # Trigger CI on push to main branch
#   pull_request:
#     branches:
#       - main  # Trigger CI on pull request to main

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the Code
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     # Step 2: Set up Python Environment
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.10'  # Use Python 3.10 or later

#     # Step 3: Install Required Dependencies
#     - name: Install Dependencies
#       run: |
#         python -m pip install --upgrade pip
#         if [ -f Requirements.txt ]; then pip install -r Requirements.txt; else echo "No RSSequirements.txt found"; fi

#     # Step 4: Run Syntax Check (Optional but Recommended)
#     - name: Run Syntax Check
#       run: |
#         python -m compileall .

#     # Step 5: Run Crop Recommender Script
#     - name: Run Crop Recommender Script
#       run: |
#         python model/CropRecommender.py || echo "Crop Recommender script failed"

#     # Step 6: Check Model and Pickle Files
#     - name: Verify Model and Mappings
#       run: |
#         ls -l model/
#         if [ -f model/RF_classifier.pkl ] && [ -f model/Crop_Mappings.pkl ]; then
#           echo "✅ Model and mappings generated successfully!"
#         else
#           echo "❌ Model generation failed! Check the logs."
#           exit 1
#         fi

#   deploy-to-render:
#     needs: build-and-test
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout Code
#       uses: actions/checkout@v3

#     - name: Trigger Render Deployment
#       run: |
#         curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?api_key=${{ secrets.RENDER_API_KEY }}"

name: Crop Recommendation CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f Requirements.txt ]; then pip install -r Requirements.txt; else echo "No Requirements.txt found"; fi

      - name: Run Syntax Check
        run: |
          python -m compileall .

      - name: Run Crop Recommender Script
        run: |
          python model/CropRecommender.py || echo "Crop Recommender script failed"

      - name: Verify Model and Mappings
        run: |
          ls -l model/
          if [ -f model/RF_classifier.pkl ] && [ -f model/Crop_Mappings.pkl ]; then
            echo "✅ Model and mappings generated successfully!"
          else
            echo "❌ Model generation failed! Check the logs."
            exit 1
          fi

  deploy-to-vercel:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}


